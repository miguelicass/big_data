#--- Pintar importancia de variables
impor_df <- as.data.frame(my_model$variable.importance)
names(impor_df)[1] <- c('Importance')
impor_df$vars <- rownames(impor_df)
rownames(impor_df) <- NULL
ggplot(impor_df, aes(fct_reorder(vars, Importance), Importance)) +
geom_col(group = 1, fill = "darkred") +
coord_flip() +
labs(x = 'Variables', y = 'Importancia', title = 'Importancia Variables') +
theme_bw()
ggsave('./charts/06_lga_nodup_fe01.png')
#------------ Prediccion
my_pred <- predict(my_model, dattestOr)
#------ Submission
my_sub <- data.table(
id = dattestOr$id,
status_group = my_pred$predictions
)
# guardo submission
fwrite(my_sub, file = "./submissions/06_lga_nodup_fe01.csv" )
#----- Trabajo exploratorio de analizar variables sospechosas iguales
numlev_df %>%
#filter(levels < 100, levels > 1) %>%
filter(levels > 1) %>%
arrange(levels)
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
library(tictoc)         # Calcular tiempos
library(missRanger)     # Fast imputatin of NAs.
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
#--- Niveles de las categoricas.
datcat_df <- dattrainOr %>% select(where(is.character))
numlev_df <- data.frame()
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
library(tictoc)         # Calcular tiempos
library(missRanger)     # Fast imputatin of NAs.
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
#--- Niveles de las categoricas.
datcat_df <- dattrainOr %>% select(where(is.character))
numlev_df <- data.frame()
for (i in 1:ncol(datcat_df)) {
col_tmp <- datcat_df[, i]
num_lev <- length(unique(col_tmp))
numlev_df[i, 1] <- names(datcat_df)[i]
numlev_df[i, 2] <- num_lev
print(numlev_df)
}
names(numlev_df) <- c('vars', 'levels')
numlev_df %>% arrange(levels)
#--- Me quedo con las castegorias que tienen valores de > 1 y < 100
vars_gd <- numlev_df %>%
filter(levels < 1000, levels > 1) %>%
select(vars)
datcat_gd <- datcat_df[ , vars_gd$vars]
#---- Corregir estas deficiencias.
# Vamos a hacer un modelo con las variables numericas
# Vamos a la playa!
datnum_df <- dattrainOr %>% select(where(is.numeric))
#--- Unifico el df de numericas y categoricas
datnumcat_df <- cbind(datnum_df, datcat_gd)
# Variable objetivo?
# Ante la duda del mismo orden de etiquetas - hago merge
dattrainOrlab <- merge(
datnumcat_df, dattrainLabOr,
by.x = c('id'), by.y = c('id'),
sort = FALSE
)
#... Efecto de quita payment_type y quantity_group
dattrainOrlab$payment_type <- NULL
dattrainOrlab$quantity_group <- NULL
#-- Exploramos construction_year
# as.data.frame(table(dattrainOrlab$construction_year))
#-- Imputamos 0s con missRanger (0 == NAs)
dattrainOrlab$fe_cyear <- dattrainOrlab$construction_year
#-- Exploramos construction_year
# as.data.frame(table(dattrainOrlab$construction_year))
#-- Imputamos 0s con missRanger (0 == NAs)
dattrainOrlab$fe_cyear <- dattrainOrlab$construction_year
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
library(tictoc)         # Calcular tiempos
library(missRanger)     # Fast imputatin of NAs.
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
# # EDA--- (Exploratory Data Analysis) - hecho con inspectdf
# # Horizontal bar plot for categorical column composition
# x <- inspect_cat(dattrainOr)
# show_plot(x)
#
# # Correlation betwee numeric columns + confidence intervals
# x <- inspect_cor(dattrainOr)
# show_plot(x)
#
# # Bar plot of most frequent category for each categorical column
# x <- inspect_imb(dattrainOr)
# show_plot(x)
#
# # Bar plot showing memory usage for each column
# x <- inspect_mem(dattrainOr)
# show_plot(x)
#
# # Occurence of NAs in each column ranked in descending order
# x <- inspect_na(dattrainOr)
# show_plot(x)
#
# # Histograms for numeric columns
# x <- inspect_num(dattrainOr)
# show_plot(x)
#
# # Barplot of column types
# x <- inspect_types(dattrainOr)
# show_plot(x)
#
# # EDA - Results
# # Mirar 0s construction_year
# # gps_height 0 y negativos
# # longitude valores de 0 ???
# # population -> outliers? (300.000)
# # 27 categóricas - 10 numéricas
# # recorded_by es una sola categoria -> cte. (a quitar)
#--- Niveles de las categoricas.
datcat_df <- dattrainOr %>% select(where(is.character))
numlev_df <- data.frame()
for (i in 1:ncol(datcat_df)) {
col_tmp <- datcat_df[, i]
num_lev <- length(unique(col_tmp))
numlev_df[i, 1] <- names(datcat_df)[i]
numlev_df[i, 2] <- num_lev
print(numlev_df)
}
names(numlev_df) <- c('vars', 'levels')
numlev_df %>% arrange(levels)
#--- Me quedo con las castegorias que tienen valores de > 1 y < 100
vars_gd <- numlev_df %>%
filter(levels < 1000, levels > 1) %>%
select(vars)
datcat_gd <- datcat_df[ , vars_gd$vars]
#---- Corregir estas deficiencias.
# Vamos a hacer un modelo con las variables numericas
# Vamos a la playa!
datnum_df <- dattrainOr %>% select(where(is.numeric))
#--- Unifico el df de numericas y categoricas
datnumcat_df <- cbind(datnum_df, datcat_gd)
# Variable objetivo?
# Ante la duda del mismo orden de etiquetas - hago merge
dattrainOrlab <- merge(
datnumcat_df, dattrainLabOr,
by.x = c('id'), by.y = c('id'),
sort = FALSE
)
#... Efecto de quita payment_type y quantity_group
dattrainOrlab$payment_type <- NULL
dattrainOrlab$quantity_group <- NULL
#-- Exploramos construction_year
# as.data.frame(table(dattrainOrlab$construction_year))
#-- Imputamos 0s con missRanger (0 == NAs)
dattrainOrlab$fe_cyear <- dattrainOrlab$construction_year
dattrainOrlab$fe_cyear <- ifelse(
dattrainOrlab$fe_cyear == 0,
NA,
dattrainOrlab$fe_cyear
)
# Train quito construction_year y status group
dattrainOrlab$construction_year <- NULL
dattrainOrlab$status_group <- NULL
dattrainOrlab_imp <- missRanger(
dattrainOrlab,
pmm.k = 3,
num.trees = 100
)
#-- Test
dattestOr$fe_cyear <- dattestOr$construction_year
dattestOr$fe_cyear <- ifelse(
dattestOr$fe_cyear == 0,
NA,
dattestOr$fe_cyear
)
dattrainOrlab$construction_year <- NULL
dattrainOrlab_imp <- missRanger(
dattrainOrlab,
pmm.k = 3,
num.trees = 100
)
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
# EDA--- (Exploratory Data Analysis) - hecho con inspectdf
# Horizontal bar plot for categorical column composition
x <- inspect_cat(dattrainOr)
show_plot(x)
# Correlation betwee numeric columns + confidence intervals
x <- inspect_cor(dattrainOr)
show_plot(x)
# Bar plot of most frequent category for each categorical column
x <- inspect_imb(dattrainOr)
show_plot(x)
# Bar plot showing memory usage for each column
x <- inspect_mem(dattrainOr)
show_plot(x)
# Occurence of NAs in each column ranked in descending order
x <- inspect_na(dattrainOr)
show_plot(x)
# Histograms for numeric columns
x <- inspect_num(dattrainOr)
show_plot(x)
# Barplot of column types
x <- inspect_types(dattrainOr)
show_plot(x)
#-------------------
# Autor: Carlos Ortega
# Fecha: 2021_03_05
# Inputs: Datos entrada bombas
# Salida: Modelo num + categor nodub hasta lga + grid search ranger.
# Comentarios:
#-------------------
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
library(tictoc)         # Calcular tiempos
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
# # EDA--- (Exploratory Data Analysis) - hecho con inspectdf
# # Horizontal bar plot for categorical column composition
# x <- inspect_cat(dattrainOr)
# show_plot(x)
#
# # Correlation betwee numeric columns + confidence intervals
# x <- inspect_cor(dattrainOr)
# show_plot(x)
#
# # Bar plot of most frequent category for each categorical column
# x <- inspect_imb(dattrainOr)
# show_plot(x)
#
# # Bar plot showing memory usage for each column
# x <- inspect_mem(dattrainOr)
# show_plot(x)
#
# # Occurence of NAs in each column ranked in descending order
# x <- inspect_na(dattrainOr)
# show_plot(x)
#
# # Histograms for numeric columns
# x <- inspect_num(dattrainOr)
# show_plot(x)
#
# # Barplot of column types
# x <- inspect_types(dattrainOr)
# show_plot(x)
#
# # EDA - Results
# # Mirar 0s construction_year
# # gps_height 0 y negativos
# # longitude valores de 0 ???
# # population -> outliers? (300.000)
# # 27 categóricas - 10 numéricas
# # recorded_by es una sola categoria -> cte. (a quitar)
#--- Niveles de las categoricas.
datcat_df <- dattrainOr %>% select(where(is.character))
numlev_df <- data.frame()
for (i in 1:ncol(datcat_df)) {
col_tmp <- datcat_df[, i]
num_lev <- length(unique(col_tmp))
numlev_df[i, 1] <- names(datcat_df)[i]
numlev_df[i, 2] <- num_lev
print(numlev_df)
}
names(numlev_df) <- c('vars', 'levels')
numlev_df %>% arrange(levels)
#--- Me quedo con las castegorias que tienen valores de > 1 y < 100
vars_gd <- numlev_df %>%
filter(levels < 1000, levels > 1) %>%
select(vars)
datcat_gd <- datcat_df[ , vars_gd$vars]
#---- Corregir estas deficiencias.
# Vamos a hacer un modelo con las variables numericas
# Vamos a la playa!
datnum_df <- dattrainOr %>% select(where(is.numeric))
#--- Unifico el df de numericas y categoricas
datnumcat_df <- cbind(datnum_df, datcat_gd)
# Variable objetivo?
# Ante la duda del mismo orden de etiquetas - hago merge
dattrainOrlab <- merge(
datnumcat_df, dattrainLabOr,
by.x = c('id'), by.y = c('id'),
sort = FALSE
)
#... Efecto de quita payment_type y quantity_group
dattrainOrlab$payment_type <- NULL
dattrainOrlab$quantity_group <- NULL
#---- FEATURE ENGINEERING -------
# construction_year = Edad + Decadas
# long /  lat -> Distancia
#-- Exploramos construction_year
# as.data.frame(table(dattrainOrlab$construction_year))
#- Edad - Referencia año = 2014
dattrainOrlab$fe_age <- 2014 - dattrainOrlab$construction_year
dattestOr$fe_age     <- 2014 - dattestOr$construction_year
#- Decadas.
# Dudas sobre años recientes - riesgo productivizacion.
#-- Distancia -----
dattrainOrlab$fe_dist <- sqrt( dattrainOrlab$longitude^2 + dattrainOrlab$latitude^2)
dattestOr$fe_dist     <- sqrt( dattestOr$longitude^2 + dattestOr$latitude^2)
dattrainOrlab$status_group <- as.factor(dattrainOrlab$status_group)
View(dattrainLabOr)
View(dattrainOrlab)
#--- H2O ----
library(h2o)
#--- H2O ----
library(h2o)
#--- H2O ----
library(h2o)
#-------------------
# Autor: Carlos Ortega
# Fecha: 2021_03_05
# Inputs: Datos entrada bombas
# Salida: Modelo num + categor nodub hasta lga + grid search ranger.
# Comentarios:
#-------------------
#--- Cargo librerías
suppressPackageStartupMessages({
library(dplyr)          # Manipulacion de datos
library(data.table)     # Leer y procesar ultra-rapido
library(ggplot2)        # La librería grafica
library(inspectdf)      # EDAs automaticos
library(ranger)         # Fast randomForest
library(forcats)        # Tratar variables categoricas
library(tictoc)         # Calcular tiempos
})
#-- Leo ficheros
dattrainOr    <- fread(file = "./data/train.csv", data.table = FALSE )
dattrainLabOr <- fread(file = "./data/train_labels.csv", data.table = FALSE )
dattestOr     <- fread(file = "./data/test.csv", data.table = FALSE  )
# # EDA--- (Exploratory Data Analysis) - hecho con inspectdf
# # Horizontal bar plot for categorical column composition
# x <- inspect_cat(dattrainOr)
# show_plot(x)
#
# # Correlation betwee numeric columns + confidence intervals
# x <- inspect_cor(dattrainOr)
# show_plot(x)
#
# # Bar plot of most frequent category for each categorical column
# x <- inspect_imb(dattrainOr)
# show_plot(x)
#
# # Bar plot showing memory usage for each column
# x <- inspect_mem(dattrainOr)
# show_plot(x)
#
# # Occurence of NAs in each column ranked in descending order
# x <- inspect_na(dattrainOr)
# show_plot(x)
#
# # Histograms for numeric columns
# x <- inspect_num(dattrainOr)
# show_plot(x)
#
# # Barplot of column types
# x <- inspect_types(dattrainOr)
# show_plot(x)
#
# # EDA - Results
# # Mirar 0s construction_year
# # gps_height 0 y negativos
# # longitude valores de 0 ???
# # population -> outliers? (300.000)
# # 27 categóricas - 10 numéricas
# # recorded_by es una sola categoria -> cte. (a quitar)
#--- Niveles de las categoricas.
datcat_df <- dattrainOr %>% select(where(is.character))
numlev_df <- data.frame()
for (i in 1:ncol(datcat_df)) {
col_tmp <- datcat_df[, i]
num_lev <- length(unique(col_tmp))
numlev_df[i, 1] <- names(datcat_df)[i]
numlev_df[i, 2] <- num_lev
print(numlev_df)
}
names(numlev_df) <- c('vars', 'levels')
numlev_df %>% arrange(levels)
#--- Me quedo con las castegorias que tienen valores de > 1 y < 100
vars_gd <- numlev_df %>%
filter(levels < 1000, levels > 1) %>%
select(vars)
datcat_gd <- datcat_df[ , vars_gd$vars]
#---- Corregir estas deficiencias.
# Vamos a hacer un modelo con las variables numericas
# Vamos a la playa!
datnum_df <- dattrainOr %>% select(where(is.numeric))
#--- Unifico el df de numericas y categoricas
datnumcat_df <- cbind(datnum_df, datcat_gd)
# Variable objetivo?
# Ante la duda del mismo orden de etiquetas - hago merge
dattrainOrlab <- merge(
datnumcat_df, dattrainLabOr,
by.x = c('id'), by.y = c('id'),
sort = FALSE
)
#... Efecto de quita payment_type y quantity_group
dattrainOrlab$payment_type <- NULL
dattrainOrlab$quantity_group <- NULL
#---- FEATURE ENGINEERING -------
# construction_year = Edad + Decadas
# long /  lat -> Distancia
#-- Exploramos construction_year
# as.data.frame(table(dattrainOrlab$construction_year))
#- Edad - Referencia año = 2014
dattrainOrlab$fe_age <- 2014 - dattrainOrlab$construction_year
dattestOr$fe_age     <- 2014 - dattestOr$construction_year
#- Decadas.
# Dudas sobre años recientes - riesgo productivizacion.
#-- Distancia -----
dattrainOrlab$fe_dist <- sqrt( dattrainOrlab$longitude^2 + dattrainOrlab$latitude^2)
dattestOr$fe_dist     <- sqrt( dattestOr$longitude^2 + dattestOr$latitude^2)
dattrainOrlab$status_group <- as.factor(dattrainOrlab$status_group)
#--- H2O ----
library(h2o)
#--- H2O ----
library(h2o)
#--- H2O ----
install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/master/3978/R")
install.packages("h2o")
install.packages("h2o")
#--- H2O ----
# install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/master/3978/R")
install.packages("h2o")
detach("package:h2o", unload=TRUE)
remove.packages("h2o")
detach("package:h2o", unload=TRUE)
detach("h2o", unload=TRUE)
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-jacobi/2/R", getOption("repos"))))
remove.packages("h2o")
#--- H2O ----
# install.packages("h2o", type="source", repos="https://h2o-release.s3.amazonaws.com/h2o/master/3978/R")
install.packages("h2o")
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos="http://h2o-release.s3.amazonaws.com/h2o/rel-zermelo/5/R")
# Finally, let's load H2O and start up an H2O cluster
library(h2o)
h2o.init()
h2o.shutdown()
y
h2o.shutdown()
